    """
    大结：
        1. 项目需求
            一对多，分组
            多对多，分组
            单表函数格式化，分组

            示例：
                1. 分类
                    category_list = models.Article.objects.filter(blog=blog).values('category_id','category__title',).annotate(c=Count('nid'))
                2. 标签
                    tag_list = models.Article2Tag.objects.filter(tag__blog=blog).values('tag_id','tag__title').annotate(c=Count('id'))
                3. 时间
                    # MySQL
                    # date_list = models.Article.objects.filter(blog=blog).extra(select={'c': "date_format(create_time,'%%Y-%%m')"}).values('c').annotate(ct=Count('nid'))
                    # SQLlite
                    # date_list = models.Article.objects.filter(blog=blog).extra(select={'c': "strftime('%%Y-%%m',create_time)"}).values('c').annotate(ct=Count('nid'))
        2. Django ORM内置函数，额外再取一列数据
            函数：
                - 基础
                    Cast, Coalesce, Concat, ConcatPair, Greatest, Least, Length, Lower, Now, Substr, Upper,
                - 时间
                    Extract, ExtractDay, ExtractHour, ExtractMinute, ExtractMonth,ExtractSecond, ExtractWeekDay, ExtractYear, Trunc, TruncDate, TruncDay,TruncHour, TruncMinute, TruncMonth, TruncSecond, TruncYear,
            # from django.db.models import FloatField
            # from django.db.models import Value
            # v = models.Article.objects.annotate(c=functions.Cast('nid', FloatField()))
            # v = models.Article.objects.annotate(c=functions.Coalesce('title','summary'))
            # v = models.Article.objects.annotate(c=functions.Concat('nid','title','summary'))
            # v = models.Article.objects.annotate(c=functions.Concat('nid','title','summary',Value('666')))
            # v = models.Article.objects.annotate(c=functions.Greatest('nid','num'))
            # v = models.Article.objects.annotate(c=functions.Length('title'))
            # v = models.Article.objects.annotate(c=functions.Substr('title',1,1))
        3. 自定义
            from django.db.models.functions.base import Func
            class YearMonthFunc(Func):
                function = 'DATE_FORMAT'
                template = '%(function)s(%(expressions)s,%(format)s)'

                def __init__(self, expression, **extra):
                    expressions = [expression]
                    super(YearMonthFunc, self).__init__(*expressions, **extra)

            v = models.UserInfo.objects.annotate(c=YearMonthFunc('create_time',format="'%%Y-%%m'"))

        本周作业：
            分类：
                - 显示（讲）
                - 筛选
            文章详细页（文章最终页）：
                - 点赞，踩
            可选：单级评论
    """